# scripts/explain_commit.py
import os, json, time, subprocess, textwrap, requests

WEBHOOK = os.environ.get("DISCORD_WEBHOOK_URL")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
REPO = os.environ.get("GITHUB_REPOSITORY", "")
SHA = os.environ.get("GITHUB_SHA", "")
ACTOR = os.environ.get("GITHUB_ACTOR", "")
COMMIT_MSG = os.environ.get("COMMIT_MSG", "")

def run(cmd: list[str]) -> str:
    out = subprocess.check_output(cmd, text=True).strip()
    return out

def list_changed_files(sha: str, limit: int = 12) -> list[str]:
    try:
        files = run(["git", "show", "--name-only", "--pretty=", sha]).splitlines()
        files = [f for f in files if f.strip()]
        return files[:limit]
    except Exception:
        return []

def post_to_discord(text: str):
    if not WEBHOOK:
        print("No DISCORD_WEBHOOK_URL set; skipping Discord post.")
        return
    payload = {"content": text[:1900]}  # keep well under 2000 char limit
    r = requests.post(WEBHOOK, headers={"Content-Type": "application/json"}, data=json.dumps(payload), timeout=30)
    r.raise_for_status()

def explain_with_openai(message: str, files: list[str], retries: int = 5) -> str:
    if not OPENAI_API_KEY:
        return "(AI explanation skipped: OPENAI_API_KEY is not set in the environment.)"
    url = "https://api.openai.com/v1/responses"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json",
    }
    prompt = textwrap.dedent(f"""
        Explain this git commit to non-technical teammates in 2–4 short bullets.
        Be plain-English, note risks/tests to run, and mention any config/CI changes.

        Commit message:
        {message or "(none)"}

        Files changed (truncated list):
        {", ".join(files) if files else "(none)"}
    """).strip()

    body = {
        "model": "gpt-4o-mini",
        "input": prompt,
        "max_output_tokens": 220,
    }

    backoff = 1
    for _ in range(retries):
        resp = requests.post(url, headers=headers, json=body, timeout=45)
        if resp.status_code == 200:
            data = resp.json()
            text = data.get("output_text")
            if not text and isinstance(data.get("output"), list):
                # very defensive fallback
                text = "".join(part.get("content", "") for part in data["output"])
            return text.strip() if text else "(AI explanation: empty response.)"
        if resp.status_code == 429:
            time.sleep(backoff)
            backoff = min(backoff * 2, 16)
            continue
        # other error: show short message
        try:
            err = resp.json()
            msg = err.get("error", {}).get("message") or str(err)
        except Exception:
            msg = resp.text
        return f"(AI explanation failed: {msg})"
    return "(AI explanation skipped: repeated 429 rate limits.)"

def main():
    files = list_changed_files(SHA)
    explanation = explain_with_openai(COMMIT_MSG, files)

    commit_url = f"https://github.com/{REPO}/commit/{SHA}" if REPO and SHA else ""
    summary = textwrap.dedent(f"""\
        **[Commit Explanation]**
        Repo: `{REPO}` • By: `{ACTOR}` • SHA: `{SHA[:7] if SHA else ''}`
        {commit_url}

        {explanation}

        • **Summary:** {COMMIT_MSG or "(none)"}
        • **Files:** {", ".join(files) if files else "(none)"}
        • **Next:** run checks/tests for impacted areas.
    """)
    post_to_discord(summary)

if __name__ == "__main__":
    main()
