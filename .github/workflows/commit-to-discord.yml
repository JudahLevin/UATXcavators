name: AI Commit Bot (minimal)

on:
  push:
    branches: [ main ]

jobs:
  post:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Post AI explanation to Discord (@everyone)
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          REPO: ${{ github.repository }}
          SHA: ${{ github.sha }}
          ACTOR: ${{ github.actor }}
          COMMIT_MSG: ${{ github.event.head_commit.message }}
        shell: bash
        run: |
          # write brief diff to a file (keeps YAML simple)
          git show --no-color --unified=0 "${SHA}" > diff.txt || true

          python - <<'PY'
import os, json, requests, textwrap

repo   = os.environ["REPO"]
sha    = os.environ["SHA"]
actor  = os.environ["ACTOR"]
msg    = (os.environ.get("COMMIT_MSG") or "").strip()
channel= os.environ["DISCORD_CHANNEL_ID"]
token  = os.environ["DISCORD_BOT_TOKEN"]
openai = os.environ.get("OPENAI_API_KEY")

# Read short diff (trim to keep costs down)
try:
    diff = open("diff.txt","r",encoding="utf-8",errors="ignore").read()[:4000]
except:
    diff = ""

def fallback_expl():
    lines = [f"• Summary: {msg or '(no commit message)'}"]
    if diff:
        # show only file paths from the diff header
        files = []
        for line in diff.splitlines():
            if line.startswith('+++ b/'):
                files.append(line[6:])
        if files:
            preview = ", ".join(files[:6]) + (" …" if len(files)>6 else "")
            lines.append(f"• Files: {preview}")
    lines.append("• Next: run checks/tests if affected areas changed.")
    return "\n".join(lines)

def ai_explain(prompt: str) -> str:
    url = "https://api.openai.com/v1/responses"
    headers = {"Authorization": f"Bearer {openai}", "Content-Type": "application/json"}
    data = {"model": "gpt-4o-mini", "input": prompt}
    r = requests.post(url, headers=headers, json=data, timeout=60)
    r.raise_for_status()
    j = r.json()
    out = j.get("output_text")
    if not out and isinstance(j.get("output"), list):
        out = "\n".join([p.get("text","") for p in j["output"] if isinstance(p, dict) and p.get("type")=="output_text"]).strip()
    return out or "(no explanation generated)"

prompt = f"""Explain this commit for a TBM team in 5–8 short lines:
- What changed (high level)
- Why it likely changed (intent)
- Any risks or checks
Commit message: {msg or '(none)'}
Diff (trimmed): {diff or '(no diff)'}
"""

explanation = fallback_expl()
if openai:
    try:
        explanation = ai_explain(prompt)
    except Exception as e:
        explanation = f"(AI explanation failed: {e})\n\n" + fallback_expl()

commit_url = f"https://github.com/{repo}/commit/{sha}"
content = textwrap.dedent(f"""
**[Commit]** `{repo}` @ `{sha[:7]}` by {actor}
{commit_url}

**[Explanation]**
@everyone
{explanation}
""").strip()

payload = {"content": content, "allowed_mentions": {"parse": ["everyone"]}}
resp = requests.post(
    f"https://discord.com/api/v10/channels/{channel}/messages",
    headers={"Authorization": f"Bot {token}", "Content-Type": "application/json"},
    data=json.dumps(payload),
    timeout=30
)
resp.raise_for_status()
print("Posted.")
PY
