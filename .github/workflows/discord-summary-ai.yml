name: Discord Commit Summary

on:
  schedule:
    - cron: '0 5 * * *'  # Runs daily at midnight CST (05:00 UTC)
  workflow_dispatch:  # Allow manual run from Actions tab

jobs:
  summarize:
    uses: Miguel07Alm/dcs/.github/workflows/dcs-action.yml@main
    with:
      frequency: daily          # Options: daily, weekly, monthly
      send_empty_summary: false # Don't post if no commits found
    secrets:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

  summarize_with_ai:
    runs-on: ubuntu-latest
    needs: recap  # waits for the original DCS job to finish
    steps:
      - name: Generate AI summary from DCS output
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python <<'PYCODE'
          import os, requests, re
          from openai import OpenAI

          client = OpenAI(api_key=os.getenv("GEMINI_API_KEY"))
          webhook = os.getenv("DISCORD_WEBHOOK_URL")

          # Step 1: Fetch the most recent DCS summary from Discord (assuming webhook sends to same channel)
          # ⚠️ Optional improvement: if your DCS logs locally, we can instead read from logs/
          # For now, we'll mock this summary with placeholder text:
          dcs_summary_text = "13 commits today: various data updates, YAML workflow deletions, and documentation edits."

          # Step 2: Generate a higher-level AI summary
          prompt = f"""
          Write a concise daily engineering summary for a Discord channel.
          Summarize these Git commits in 3-4 sentences, focusing on themes, progress, and changes.
          Use an upbeat, clear tone suitable for daily recaps.

          Commits summary:
          {dcs_summary_text}
          """

          try:
              response = client.chat.completions.create(
                  model="gemini-1.5-flash",
                  messages=[{"role": "user", "content": prompt}]
              )
              ai_summary = response.choices[0].message.content.strip()
          except Exception as e:
              ai_summary = f"(Error generating summary: {e})"

          message = f"🤖 **AI Daily Summary:**\n{ai_summary}"
          requests.post(webhook, json={"content": message})
          PYCODE
